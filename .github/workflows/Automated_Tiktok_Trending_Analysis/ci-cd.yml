name: CI/CD - FastAPI to Cloud Run

on:
  push:
    branches: [main]
  pull_request:

jobs:
  ci:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # optional: test deps
          pip install pytest pytest-cov

      - name: Lint (optional)
        run: |
          pip install ruff
          ruff check .

      - name: Run tests
        run: pytest -q

  cd:
    name: Docker Build, Push & Deploy
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION: ${{ secrets.GCP_REGION }} # e.g. asia-southeast2
      SERVICE_NAME: fastapi-tiktok-dashboard # bebas
      IMAGE: asia.gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapi-tiktok-dashboard:${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }} # JSON SA key
          export_default_credentials: true

      - name: Configure Docker auth
        run: gcloud auth configure-docker --quiet

      - name: Build Docker image
        run: docker build -t "$IMAGE" -f Dockerfile .

      - name: Push image
        run: docker push "$IMAGE"

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image "$IMAGE" \
            --region "$REGION" \
            --platform managed \
            --allow-unauthenticated \
            --port 8001 \
            --set-env-vars POSTGRES_HOST=${{ secrets.POSTGRES_HOST }},POSTGRES_DB=${{ secrets.POSTGRES_DB }},POSTGRES_USER=${{ secrets.POSTGRES_USER }},POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
